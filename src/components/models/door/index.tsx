/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 ESSPD5S60.gltf --transform --types 
Files: ESSPD5S60.gltf [71.52KB] > ESSPD5S60-transformed.glb [63.22KB] (12%)
*/

import { useAppSelector } from "@/hooks/reduxHook";
import { useGLTF } from "@react-three/drei";
import React from "react";
import * as THREE from "three";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    ["door"]: THREE.Mesh;
    ["slidingdoor"]: THREE.Mesh;
    ["slidingdoor_1"]: THREE.Mesh;
  };
  materials: {
    glass: THREE.MeshPhysicalMaterial;
    metal: THREE.MeshStandardMaterial;
  };
};

interface DoorProps {
  position: [number, number, number];
  rotation: [number, number, number];
  scale: [number, number, number];
}

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Door({ position, rotation, scale }: DoorProps) {
  // Component implementation
  const shapeKey = useAppSelector(
    (state) => state.essentialPatioDoor.factors.shapeKey,
  );
  const { nodes, materials } = useGLTF("/gltf/door.glb") as GLTFResult;
  console.log(nodes);

  const colors = useAppSelector((state) => state.essentialPatioDoor.colors);
  const DoorMaterial = new THREE.MeshStandardMaterial({
    color: colors.color, // Aluminum
    metalness: colors.metalness, // Max metalness for a metal look
    roughness: colors.roughness, // Adjust the roughness for the desired level of reflection
    side: THREE.DoubleSide,
  });

  // newMaterial = metalMaterial

  return (
    <group dispose={null}>
      <group rotation={rotation} position={position} scale={scale}>
        <mesh
          geometry={nodes["door"].geometry}
          material={DoorMaterial}
          morphTargetDictionary={nodes.door.morphTargetDictionary}
          morphTargetInfluences={shapeKey}
        />
        <mesh
          geometry={nodes["slidingdoor"].geometry}
          material={materials.glass}
          morphTargetDictionary={nodes.slidingdoor.morphTargetDictionary}
          morphTargetInfluences={shapeKey}
        />
        <mesh
          geometry={nodes["slidingdoor_1"].geometry}
          material={DoorMaterial}
          morphTargetDictionary={nodes.slidingdoor_1.morphTargetDictionary}
          morphTargetInfluences={shapeKey}
        />
        {/* <mesh geometry={nodes['doorsliding_1'].geometry} material={material2} /> */}
      </group>
    </group>
  );
}

useGLTF.preload("/gltf/door.glb");
